buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}

apply plugin: "maven"


apply plugin: 'net.minecraftforge.gradle.forge'

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = "xyz.epoxide.sipo"
archivesBaseName = "SIPO"
version = getVersionFromJava(file("src/main/java/xyz/epoxide/sipo/libs/Constants.java"))

minecraft {
    version = "1.10.2-12.18.2.2099"
    runDir = "run"
    mappings = "snapshot_20161116"
    useDepAts = true
}

processResources {

    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {

        include 'mcmod.info'
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {

        exclude 'mcmod.info'
    }
}
jar {

    manifest {

        attributes "FMLCorePlugin": "xyz.epoxide.sipo.asm.SIPOLoadingPlugin", "FMLCorePluginContainsFMLMod": "true"
    }
}
String getVersionFromJava(File file) {

    String release = "0";
    String update = "0";
    String patch = "0";

    String build = System.getenv("BUILD_NUMBER") ? System.getenv("BUILD_NUMBER") : "0";
    def outfile = "";
    def ln = System.getProperty("line.separator")

    String prefix = "public static final String VERSION_NUMBER = \"";
    file.eachLine {
        String s ->

            String v = s.trim();

        if (v.startsWith(prefix)) {

            v = v.substring(prefix.length(), v.length() - 2);
            String[] pts = v.split("\\.");

            release = pts[0];
            update = pts[1];
            patch = pts[2];
            s = s.replaceAll(".0\";", ".${build}\";");
        }

        outfile += (s + ln);
    }

    file.write(outfile);

    return "1.10.2-$release.$update.$patch.$build";
}

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = "deobf"
}

//Adds the deobf, source and javadoc jars to the build artifacts.
artifacts {
    archives deobfJar
    archives sourcesJar
    archives javadocJar
}

//Uploads the artifacts to the maven server.
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file:///var/www/html/maven")
        }
    }
}

//Prevents incomplete JavaDocs from preventing a build on Java 8.
if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}
